// app/api/admin/products/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import dbConnect from "@/lib/db";
import Product from "@/models/product";
import { verifyAdminAuth } from "@/app/api/admin/auth/route";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params; // FIXED: Await params
    
    const authCheck = await verifyAdminAuth();
    if (!authCheck.isValid) {
      return NextResponse.json({ error: authCheck.error }, { status: 401 });
    }

    await dbConnect();

    const product = await Product.findById(id).populate([
      { path: "brand", select: "name" },
      { path: "category", select: "name" },
    ]);

    if (!product) {
      return NextResponse.json(
        { error: "Product not found" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { success: true, data: product },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("Error fetching product:", error);
    return NextResponse.json(
      { error: error.message || "Failed to fetch product" },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params; // FIXED: Await params
    
    const authCheck = await verifyAdminAuth();
    if (!authCheck.isValid) {
      return NextResponse.json({ error: authCheck.error }, { status: 401 });
    }

    await dbConnect();
    const body = await request.json();

    const {
      name,
      description,
      shortDescription,
      price,
      oldPrice,
      sku,
      stock,
      brand,
      category,
      thumbnail,
      images,
      attributes,
      options,
      isTodayDeal,
      isComingSoon,
      isActive,
      isFeatured,
    } = body;

    // Validation
    if (!name || !description || !price || !sku || !brand || !category) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    if (!thumbnail) {
      return NextResponse.json(
        { error: "Thumbnail image is required" },
        { status: 400 }
      );
    }

    // Check for duplicate SKU (if SKU changed)
    const existingProduct = await Product.findById(id);
    if (existingProduct && existingProduct.sku !== sku.toUpperCase()) {
      const duplicateSku = await Product.findOne({ sku: sku.toUpperCase() });
      if (duplicateSku) {
        return NextResponse.json(
          { error: "Product with this SKU already exists" },
          { status: 400 }
        );
      }
    }

    const updatedProduct = await Product.findByIdAndUpdate(
      id,
      {
        name,
        description,
        shortDescription,
        price,
        oldPrice,
        sku: sku.toUpperCase(),
        stock,
        brand,
        category,
        thumbnail,
        images,
        attributes,
        options,
        isTodayDeal,
        isComingSoon,
        isActive,
        isFeatured,
        // slug is auto-generated by pre-save hook
      },
      { new: true, runValidators: true }
    ).populate([
      { path: "brand", select: "name" },
      { path: "category", select: "name" },
    ]);

    if (!updatedProduct) {
      return NextResponse.json(
        { error: "Product not found" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { success: true, data: updatedProduct, message: "Product updated successfully" },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("Error updating product:", error);
    return NextResponse.json(
      { error: error.message || "Failed to update product" },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params; // FIXED: Await params
    
    const authCheck = await verifyAdminAuth();
    if (!authCheck.isValid) {
      return NextResponse.json({ error: authCheck.error }, { status: 401 });
    }

    await dbConnect();

    // Get the product first (for logging)
    const product = await Product.findById(id);
    if (!product) {
      return NextResponse.json(
        { error: "Product not found" },
        { status: 404 }
      );
    }

    // Delete the product
    await Product.findByIdAndDelete(id);

    // IMPORTANT: Clean up the unique index by removing old slug
    // This ensures the slug can be reused if a new product with same name is created
    try {
      // Try to drop the specific index entry (this is automatically handled by MongoDB)
      // but we ensure by using dropIndex if needed
      await Product.collection.dropIndex("slug_1");
      // Recreate the unique index on slug
      await Product.collection.createIndex({ slug: 1 }, { unique: true });
    } catch (indexError) {
      // Index recreation may fail if it doesn't exist, but that's okay
      // MongoDB will handle this on next insert
      console.log("Index cleanup note:", indexError);
    }

    return NextResponse.json(
      {
        success: true,
        message: "Product deleted successfully",
      },
      { status: 200 }
    );
  } catch (error: any) {
    console.error("Error deleting product:", error);
    return NextResponse.json(
      { error: error.message || "Failed to delete product" },
      { status: 500 }
    );
  }
}